# TensorFlow 2: Set up GPU, cuDNN, python, jupyter & tf2 **on Windows 11 for Dell Workstation5820**

## Check if you have all the component for GPU to talk to Python on Windows 11 home edition and Dell precision workstation 5820

## In Summary

1. install 2019 +C++ game
2. install  the GPU drivers [NVDIA CUDA version 11.7]
3. Installing cuDNN SDK (matching with CUDA)
4. check the  these paths are in the system’s `Path`environment variable (no additional action required)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3fdd2e78-8cd8-4292-a616-c885b0dbcbb7/Untitled.png)
    
5. Install miniconda 3.9 
6. Create and activate a victual environment using conda create --name tf python=3.9
conda activate tf

conda install -c conda-forge cudatoolkit=11.2 cudnn=8.1.0
pip install --upgrade pip
pip install "tensorflow-gpu<2.11"

For more information and troubleshooting see below: 

## **Microsoft Visual Studio**

1. **uninstall the 2022**
2. **install 2019 +C++ game**
    
    ## **Troubleshooting for VS 2022**
    
    if you get the VS 2022 to work, this might help. make sure c packages are installed and the 
    
    go to 
    
    ```python
    C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build
    ```
    
    copy the path and open it in terminal 
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a487f927-a8b9-4938-87a5-8d3d251b7004/Untitled.png)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/07fa5603-cdf9-499d-9bdc-9424c48a83e3/Untitled.png)
    

## **NVIDIA GPU drivers**

**Not to do:** don't install version 12, note that cuDNN needs to match this version. there is website to check the compatibility. 

[CUDA 12.2 Release Notes](https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html#cuda-compiler-new-features)

## **Checking for a CUDA-capable NVIDIA GPU**

**CUDA** (by NVIDIA) is the most popular platform for parallel computing and programming. 

- **Step 1:** Check whether there is any GPU and its part number if a GPU is available. There are two ways to do it.
1. Check the specification of your device given by the manufacturer.
2. Go to Windows **Device Manager → Display Adapters**. 

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/8df0b886-f419-455b-b63f-93762bc6216a/Untitled.png)

## **Installing the GPU drivers [install version 11.7]**

If you don’t have GPU drivers installed on your PC or laptop, you need to install the correct driver through [this website](https://www.nvidia.com/download/index.aspx). If your GPU driver is already shown in the Display Adaptors, you can skip this step.

**Selecting the right driver for my NVIDIA GPU** (Image from NVIDIA website, screenshot by author)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ace42707-1c33-4fc9-bdb4-b81dc7dfd605/Untitled.png)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/46f54db7-7168-44c6-b522-9e7a7c58aa72/Untitled.png)

run the toolkit after this

2.6. Verify the Installation
The version of the CUDA Toolkit can be checked by running nvcc -V in a Command Prompt window. ...

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/735fa0f8-4efa-4fd4-a2af-85f7b2cb2ad1/Untitled.png)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7f1e1857-a1f0-4790-8048-5924c247c6ce/Untitled.png)

if you get this error: remove nighsite visual sudio and try again 

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/da7c6761-f89a-425c-9be8-db56c8d10ce6/Untitled.png)

system restart is required 

## **cuDNN SDK**

### **Installing cuDNN SDK**

**should match's the CUDA just installed**

**Step 1:** Visit [this website](https://www.tensorflow.org/install/source_windows#gpu) to see the cuDNN SDK version number that is compatible with the installed Python and TensorFlow versions.

!https://miro.medium.com/v2/resize:fit:1400/1*SjFt__EiqoqE65CCUonw-w.png

**Selecting the right version for the cuDNN SDK** (Image from TensorFlow website, screenshot by author)

The most important thing is selecting the correct cuDNN SDK version that matches the installed Python, TensorFlow and CUDA Toolkit versions. [We i](https://developer.nvidia.com/rdp/cudnn-download#a-collapse893-120)

[Download cuDNN v8.9.3 (July 11th, 2023), for CUDA 12.x](https://developer.nvidia.com/rdp/cudnn-download#a-collapse893-120)

- **Step 2:** Go to [this website](https://developer.nvidia.com/cudnn) to download the cuDNN SDK. You should have an account on NVIDIA to proceed. You will also need to fill out a small survey form before downloading.
- [Local Installer for Windows (Zip)](https://developer.nvidia.com/downloads/compute/cudnn/secure/8.9.3/local_installers/12.x/cudnn-windows-x86_64-8.9.3.28_cuda12-archive.zip/)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/eb69565b-1dbb-4695-8c20-cfea7961c63f/Untitled.png)
    

- **Step 3:** Download the ***.zip*** file.
- **Step 4:** Extract the ***.zip*** file and copy the following folders inside it.

!https://miro.medium.com/v2/resize:fit:1238/1*WRJnxq-LiVei0_4es5HdQg.png

(Image by author)

- **Step 5:** Go the following path. Your path may vary depending on the architecture and the version numbers of installed software. So, do not copy my path!

```
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2
```

- **Step 6:** Paste the copied folders. The system may ask to replace the files.
- **Step 7:** Go to the **bin** folder and copy the path. Go to the **libnvvp** folder and copy the path. Your paths may vary depending on the architecture and the version numbers of installed software. So, do not copy my paths!

```
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.7\binC:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.7\lib
```

- **Step 7:** Add these paths to the system’s `Path`environment variable.

!https://miro.medium.com/v2/resize:fit:1400/1*meoO8hqGzxDzSwhoXOKwfA.png

(Image by author)

!https://miro.medium.com/v2/resize:fit:842/1*oZz72GjifuQBfmbRHjNGUA.png

(Image by author)

!https://miro.medium.com/v2/resize:fit:1228/1*Ru9YphRo0d4AP21oJhCMVA.png

(Image by author)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/388fbae1-16e3-4fe1-a495-0c009fad3f09/Untitled.png)

!https://miro.medium.com/v2/resize:fit:1076/1*f3lS5rR5y27eVP-WfD9-TQ.png

## Troubleshooting

run as admin [you may not need this part , I put them here for troubleshooting (note that some of them are related to v12.2 , please kindly ignore them 

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e9d22db0-b48e-49e8-a149-3235c20f0a59/Untitled.png)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/edacc6e3-86b8-435e-8e40-be5282459204/Untitled.png)

2.6.1. Running the Compiled Examples

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a3f285b6-18ad-47e4-a9de-5b61f907f327/Untitled.png)

2.6.1. Running the Compiled Examples

upload samples and extract in Documents. CUDA Samples are located in https://github.com/nvidia/cuda-samples. To use the samples, clone the project, build the samples, and run them using the instructions on the Github page.

write click and open with VS code 

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/87025721-dd83-4de2-8d2a-ec7869dc1d93/Untitled.png)

## **Verifying the GPU detection mainly for Version 12,2**

After you have done all the installations, it is time to verify them. Open a Python 3 Jupyter Notebook from the Anaconda Navigator and execute one of the following commands.

```
import tensorflow as tf
tf.test.gpu_device_name()
```

!https://miro.medium.com/v2/resize:fit:314/1*BhM9E_SSgItx1L-mCAVHJA.png

I still cant see, this, lets add cuDNN as the examples are not working 

 

1. Add cuDNN to your Visual Studio project.
    1. Open the Visual Studio project, right-click on the project name in **Solution Explorer**, and choose **Properties**.
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/999a4ea0-bd47-46ae-894c-7fa6d65728a4/Untitled.png)
    
    1. Get help from this page: https://medium.com/geekculture/install-cuda-and-cudnn-on-windows-linux-52d1501a8805
    2. if the system vaiables are inactive 
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/42843e7e-be50-4cf4-9fc9-6a919d15146e/Untitled.png)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b424f97b-1228-4525-b5a6-9ceb1168618c/Untitled.png)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/9efd8bc8-dfe7-46ab-911c-0c8195353081/Untitled.png)
    
    1. 
    2. 
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/11878559-62b9-4591-8a50-0f1514761826/Untitled.png)
    
    1. Now its active Click **VC++ Directories** and append `C:\Program Files\NVIDIA\CUDNN\v8.x\include` to the **Include Directories** field.
    2. Click **Linker > General** and append `C:\Program Files\NVIDIA\CUDNN\v8.x\lib` to the **Additional Library Directories** field.
    3. Click **Linker > Input** and append `cudnn.lib` to the **Additional Dependencies** field and click **OK**.

```
import tensorflow as tf
tf.config.list_physical_devices('GPU')
```

!https://miro.medium.com/v2/resize:fit:1298/1*qURRHBzNMCetrTP8ryv4lw.png

(Image by author)

```
len(tf.config.list_physical_devices('GPU'))

import tensorflow as tf

# Check for available GPUs
gpus = tf.config.list_physical_devices('GPU')

if gpus:
    # If GPUs are available, print their names
    for gpu in gpus:
        print(f"GPU Device Name: {gpu}")
else:
    print("No GPU devices found.")
```

In my case, this returns 1 — The number of available GPUs.

Congratulations! TensorFlow has detected the NVIDIA GPU on your system. From now on, Keras and TensorFlow will run on GPU by default.

## P**ython**

install miniconda 3.9 

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4097dba1-3e72-4a3a-9bfa-e1e2a218d027/Untitled.png)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b8d59737-ec66-4105-a09c-696eaec2a1a5/Untitled.png)

**Check all the installed Python versions on Windows**

```jsx
# Run this inside Ananconda prompt(miniconda) or comand prompt 
(base) C:\Users\peyma>py -0
 -V:3.9 *         Python 3.9 (64-bit)

(base) C:\Users\peyma>py --list
 -V:3.9 *         Python 3.9 (64-bit)

(base) C:\Users\peyma>py -0p
 -V:3.9 *         C:\Users\peyma\AppData\Local\Programs\Python\Python39\python.exe
		

```

Or inside the Anaconda prompt 

```jsx
(base) C:\Users\peyma>python
Python 3.9.17 (main, Jul  5 2023, 21:22:06) [MSC v.1916 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>>
```

## **Install TensorFlow GPU**

1. **Prerequisite**: lunch anaconda prompt miniconda  and run 

```jsx
**python.exe -m pip install --upgrade setuptools pip**
```

here are an example

```jsx
conda create --name tf python=3.9
conda activate tf

conda install -c conda-forge cudatoolkit=11.2 cudnn=8.1.0
pip install --upgrade pip
pip install "tensorflow-gpu<2.11"
```

The Installation was successful lets test it 

```jsx
(tf) C:\Users\peyma>python
Python 3.9.17 (main, Jul  5 2023, 20:47:11) [MSC v.1916 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import tensorflow as tf
>>> print(len(tf.config.list_physical_devices('GPU'))>0)
True
```

 

- **Troubleshooting**
    
    pip install tensorflow-gpu the roor war related to windows3.7 not related!
    
    ```jsx
    (base) C:\Users\peyma>pip install tensorflow-gpu
    Collecting tensorflow-gpu
      Downloading tensorflow-gpu-2.12.0.tar.gz (2.6 kB)
      Preparing metadata (setup.py) ... error
      error: subprocess-exited-with-error
    
      × python setup.py egg_info did not run successfully.
      │ exit code: 1
      ╰─> [39 lines of output]
          Traceback (most recent call last):
            File "C:\Users\peyma\miniconda3\lib\site-packages\setuptools\_vendor\packaging\requirements.py", line 35, in __init__
              parsed = _parse_requirement(requirement_string)
            File "C:\Users\peyma\miniconda3\lib\site-packages\setuptools\_vendor\packaging\_parser.py", line 64, in parse_requirement
              return _parse_requirement(Tokenizer(source, rules=DEFAULT_RULES))
            File "C:\Users\peyma\miniconda3\lib\site-packages\setuptools\_vendor\packaging\_parser.py", line 82, in _parse_requirement
              url, specifier, marker = _parse_requirement_details(tokenizer)
            File "C:\Users\peyma\miniconda3\lib\site-packages\setuptools\_vendor\packaging\_parser.py", line 126, in _parse_requirement_details
              marker = _parse_requirement_marker(
            File "C:\Users\peyma\miniconda3\lib\site-packages\setuptools\_vendor\packaging\_parser.py", line 147, in _parse_requirement_marker
              tokenizer.raise_syntax_error(
            File "C:\Users\peyma\miniconda3\lib\site-packages\setuptools\_vendor\packaging\_tokenizer.py", line 165, in raise_syntax_error
              raise ParserSyntaxError(
          setuptools.extern.packaging._tokenizer.ParserSyntaxError: Expected end or semicolon (after name and no valid version specifier)
              python_version>"3.7"
                            ^
    
          The above exception was the direct cause of the following exception:
    
          Traceback (most recent call last):
            File "<string>", line 2, in <module>
            File "<pip-setuptools-caller>", line 34, in <module>
            File "C:\Users\peyma\AppData\Local\Temp\pip-install-gpweiee9\tensorflow-gpu_51eb3ce289b54c2994cd39f887f7579f\setup.py", line 40, in <module>
              setuptools.setup()
            File "C:\Users\peyma\miniconda3\lib\site-packages\setuptools\__init__.py", line 106, in setup
              _install_setup_requires(attrs)
            File "C:\Users\peyma\miniconda3\lib\site-packages\setuptools\__init__.py", line 77, in _install_setup_requires
              dist.parse_config_files(ignore_option_errors=True)
            File "C:\Users\peyma\miniconda3\lib\site-packages\setuptools\dist.py", line 900, in parse_config_files
              self._finalize_requires()
            File "C:\Users\peyma\miniconda3\lib\site-packages\setuptools\dist.py", line 597, in _finalize_requires
              self._move_install_requirements_markers()
            File "C:\Users\peyma\miniconda3\lib\site-packages\setuptools\dist.py", line 637, in _move_install_requirements_markers
              inst_reqs = list(_reqs.parse(spec_inst_reqs))
            File "C:\Users\peyma\miniconda3\lib\site-packages\setuptools\_vendor\packaging\requirements.py", line 37, in __init__
              raise InvalidRequirement(str(e)) from e
          setuptools.extern.packaging.requirements.InvalidRequirement: Expected end or semicolon (after name and no valid version specifier)
              python_version>"3.7"
                            ^
          [end of output]
    
      note: This error originates from a subprocess, and is likely not a problem with pip.
    error: metadata-generation-failed
    
    × Encountered error while generating package metadata.
    ╰─> See above for output.
    
    note: This is an issue with the package mentioned above, not pip.
    hint: See above for details.
    
    (base) C:\Users\peyma>
    ```
    
     **[Didnt helped]** to fix the error : worked , but still the install tensorflow-gpu doent work so try venv
    
    ```jsx
    (base) C:\Users\peyma>**python.exe -m pip install --upgrade setuptools pip**
    Requirement already satisfied: setuptools in c:\users\peyma\miniconda3\lib\site-packages (68.0.0)
    Requirement already satisfied: pip in c:\users\peyma\miniconda3\lib\site-packages (23.1.2)
    Collecting pip
      Using cached pip-23.2.1-py3-none-any.whl (2.1 MB)
    Installing collected packages: pip
      Attempting uninstall: pip
        Found existing installation: pip 23.1.2
        Uninstalling pip-23.1.2:
          Successfully uninstalled pip-23.1.2
    Successfully installed pip-23.2.1
    ```
    

## Install Jupyter
